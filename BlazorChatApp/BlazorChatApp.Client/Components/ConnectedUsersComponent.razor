
@if (ConnectedUsers is not null && ConnectedUsers.Count > 0)
{
	@foreach (var user in ConnectedUsers)
	{
		@if (user.UserId != this.LogonUserId)
		{
			var unreadMessage = user.Messages.Count(m => m.Unread == true && m.FromUserId != this.LogonUserId);
			<tr 
				style="cursor:pointer; height: 30px;" 
				@key="user.ConnectionId"
				@onclick="async ()=> await SelectUser(user.ConnectionId)"
			>
				<td>@user.UserName</td>
				<td>
					@if (unreadMessage > 0)
					{
							<div class="unread-indicator">
								@unreadMessage
							</div>
					}
				</td>
			</tr>
		}
		
	}
}
<h3>Connected Users</h3>
<ul>
	

</ul>

@code {
	[Parameter]
	public List<ConnectedUser>? ConnectedUsers { get; set; }

	[Parameter]
	public string? LogonUserId { get; set; }
	[Parameter]
	public EventCallback<ConnectedUser> OnUserSelected { get; set; }

	public void ClearUnreadMessageCount(string userId)
	{
		this.ConnectedUsers?.FirstOrDefault(x => x.UserId == userId)?
			.Messages.ForEach(m => m.Unread = false);
		StateHasChanged();
	}

	private async Task SelectUser(string? connectionId)
	{
		var targetUser = ConnectedUsers?.FirstOrDefault(u => u.ConnectionId == connectionId);
		if (targetUser is not null)
		{
			targetUser.Messages.ForEach(m => m.Unread = false);
			await OnUserSelected.InvokeAsync(targetUser);
		}
	}
}
